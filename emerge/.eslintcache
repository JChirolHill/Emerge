[{"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/index.js":"1","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/App.js":"2","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/reportWebVitals.js":"3","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/StageManager.js":"4","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage3.js":"5","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage1.js":"6","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage2.js":"7","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage4.js":"8","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/InputArea.js":"9","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/API.js":"10","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/CorrectionBlock.js":"11","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/CorrectionPart.js":"12"},{"size":500,"mtime":1608779159711,"results":"13","hashOfConfig":"14"},{"size":396,"mtime":1620355663798,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1608779159713,"results":"16","hashOfConfig":"14"},{"size":4795,"mtime":1624159087096,"results":"17","hashOfConfig":"14"},{"size":3210,"mtime":1638164784278,"results":"18","hashOfConfig":"14"},{"size":1164,"mtime":1624158659789,"results":"19","hashOfConfig":"14"},{"size":1160,"mtime":1624158636203,"results":"20","hashOfConfig":"14"},{"size":1502,"mtime":1624158629040,"results":"21","hashOfConfig":"14"},{"size":506,"mtime":1617582829328,"results":"22","hashOfConfig":"14"},{"size":4326,"mtime":1638165302114,"results":"23","hashOfConfig":"14"},{"size":926,"mtime":1609282936433,"results":"24","hashOfConfig":"14"},{"size":379,"mtime":1609281450395,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"lrpx1c",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/index.js",[],["53","54"],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/App.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/reportWebVitals.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/StageManager.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage3.js",["55"],"import React, { useState, useEffect } from 'react';\nimport InputArea from './InputArea';\nimport { SplitLinesFromRaw, CountLinesRaw, TrimSentence } from './API';\n\n// Stage 3 shows users each correction so they can correctly split by line\n// Only moves to stage 4 when all lines are correctly split up\nexport default function Stage3(props) {\n    const [raw, setRaw] = useState(props.inputText.join('\\n'));\n    const [numLinesRaw, setNumLinesRaw] = useState(CountLinesRaw(raw));\n    const [linesEqual, setLinesEqual] = useState(props.originalLines.length === numLinesRaw);\n\n    useEffect(() => {\n        const tempRaw = props.inputText.join('\\n');\n        setRaw(tempRaw);\n        const tempNumLinesRaw = CountLinesRaw(tempRaw)\n        setNumLinesRaw(tempNumLinesRaw);\n        setLinesEqual(props.originalLines.length === tempNumLinesRaw);\n    }, [props.inputText, props.originalLines]);\n\n    return (\n        <div>\n            <h4 className=\"mb-3\">Add/remove new lines (return key) until the number of lines matches that of the original:</h4>\n            <h4>{props.currCorrectionIndex}/{props.totalCorrections} Corrections</h4>\n\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6 text-end divider\">\n                    <h3>Original</h3>\n                    <div style={{marginTop: '10px'}} className=\"text-start overflow-auto text-nowrap\">\n                        { props.originalLines.map((line, index) => {\n                            return (<div key={`orig-line-${index}`} className=\"spaced-vertically\">{(line)}</div>)\n                        })}\n                    </div>\n                </div>\n                <div className=\"col-12 col-md-6 text-start\">\n                    <h3>Correction</h3>\n                    <InputArea\n                        spaced={true}\n                        inputText={raw}\n                        rows={props.originalLines.length}\n                        onInput={handleInput}\n                        nowrap={true}/>\n                </div>\n            </div>\n\n            <div className=\"row\">\n                <div className={`col-6 text-end divider ${linesEqual ? 'text-success' : 'text-danger'}`}>\n                    {`${props.originalLines.length} lines`}\n                </div>\n                <div className={`col-6 text-start ${linesEqual ? 'text-success' : 'text-danger'}`}>\n                    {`${numLinesRaw} lines`}\n                </div>\n            </div>\n\n            <button className=\"btn\" onClick={handleReset}>Reset</button>\n            {props.originalLines.length === numLinesRaw && <button className=\"btn\" onClick={handleSubmit}>Continue</button>}\n        </div>\n    );\n\n    function handleInput(event) {\n        console.log(event);\n        setRaw(event.target.value);\n\n        let updatedLines = CountLinesRaw(event.target.value);\n        setNumLinesRaw(updatedLines);\n        setLinesEqual(props.originalLines.length === updatedLines);\n    }\n\n    function handleSubmit() {\n        if (props.originalLines.length === numLinesRaw) {\n            props.onSubmit(SplitLinesFromRaw(raw));\n        }\n        // TODO else do error message\n    }\n\n    function handleReset() {\n        setRaw(props.inputText.join('\\n'));\n    }\n}\n","/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage1.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage2.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/Stage4.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/InputArea.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/API.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/CorrectionBlock.js",[],"/Users/ender/Documents/Home/Projects/Emerge/emerge/src/CorrectionPart.js",[],["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":3,"column":44,"nodeType":"64","messageId":"65","endLine":3,"endColumn":56},{"ruleId":"58","replacedBy":"66"},{"ruleId":"60","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'TrimSentence' is defined but never used.","Identifier","unusedVar",["68"],["69"],"no-global-assign","no-unsafe-negation"]